/*
 * Copyright (C) 2006, 2007, 2009 Apple Inc. All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// Introduced in DOM Level 2:
[
    JSCustomHeader,
    JSCustomMarkFunction,
    GenerateIsReachable,
    JSCustomGetOwnPropertySlotAndDescriptor,
    CustomNamedSetter,
    CustomEnumerateProperty,
    SkipVTableValidation,
] interface CSSStyleDeclaration {
    [SetterRaisesException] attribute DOMString? cssText;

    DOMString getPropertyValue([Default=Undefined] DOMString propertyName);
    [Custom] CSSValue           getPropertyCSSValue([Default=Undefined] optional DOMString propertyName);
    [RaisesException] DOMString          removeProperty([Default=Undefined] optional DOMString propertyName);
    DOMString?          getPropertyPriority([Default=Undefined] optional DOMString propertyName);

    // FIXME: 'priority' should use [TreatNullAs=EmptyString].
    [ObjCLegacyUnnamedParameters, RaisesException] void setProperty([Default=Undefined] optional DOMString propertyName, 
                                    [TreatNullAs=EmptyString, Default=Undefined] optional DOMString value,
                                    [Default=Undefined] optional DOMString priority);

    readonly attribute unsigned long    length;
    getter DOMString          item([Default=Undefined] optional unsigned long index);
    readonly attribute CSSRule          parentRule;

    // Extensions
    DOMString?          getPropertyShorthand([Default=Undefined] optional DOMString propertyName);
    boolean            isPropertyImplicit([Default=Undefined] optional DOMString propertyName);
};

